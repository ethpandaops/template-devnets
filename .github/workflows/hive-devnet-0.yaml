name: Hive - Devnet 0
on:
  schedule:
    - cron: '45 12 * * *'
  workflow_dispatch:
    # Note: We're limited to 10 inputs
    inputs:
      client:
        type: string
        default: '"go-ethereum","reth","nethermind","nimbus-el","besu","erigon"'
        description: Comma-separated list of clients to test .e.g go-ethereum, besu, reth, nethermind, erigon, nimbus-el
      simulator:
        type: string
        default: >-
          "ethereum/eest/consume-engine",
          "ethereum/eest/consume-rlp"
        description: >-
          Comma-separated list of simulators to test
          .e.g ethereum/rpc-compat, ethereum/eest/consume-engine, ethereum/eest/consume-rlp, ethereum/eest/execute-blobs
      hive_version:
        type: string
        default: ethereum/hive@master
        description: GitHub repository and tag for hive (repo@tag)
      client_source:
        type: choice
        description: >-
          How client images should be sourced.
          'git' will use the github repo and tag (See client_repos).
          'docker' will use the docker registry and tag (See client_images).
        options:
          - docker
          - git
      common_client_tag:
        type: string
        description: >-
          If provided, this tag will be used for all clients, overriding individual tags/branches in client_repos and client_images
        default: 'template-devnet-0'
      client_repos:
        type: string
        default: |
          {
            "geth": "ethereum/go-ethereum@master",
            "besu": "hyperledger/besu@main",
            "reth": "paradigmxyz/reth@main",
            "nethermind": "NethermindEth/nethermind@master",
            "erigon": "erigontech/erigon@main",
            "nimbusel": "status-im/nimbus-eth1@master"
          }
        description: 'JSON object containing client versions in format {"client": "repo@tag", ...}'
      client_images:
          type: string
          default: |
            {
              "geth": "docker.ethquokkaops.io/dh/ethpandaops/geth:template-devnet-0",
              "besu": "docker.ethquokkaops.io/dh/ethpandaops/besu:template-devnet-0",
              "reth": "docker.ethquokkaops.io/dh/ethpandaops/reth:template-devnet-0",
              "nethermind": "docker.ethquokkaops.io/dh/ethpandaops/nethermind:template-devnet-0",
              "erigon": "docker.ethquokkaops.io/dh/ethpandaops/erigon:template-devnet-0",
              "nimbusel": "docker.ethquokkaops.io/dh/ethpandaops/nimbus-eth1:template-devnet-0"
            }
          description: 'JSON object containing client docker images in format {"client": "registry:tag", ...}'

env:
  # Proxy
  GOPROXY: "${{ vars.GOPROXY }}"
  # Hive action environment variables
  S3_BUCKET: hive-results
  S3_PATH: template-devnet-0
  S3_PUBLIC_URL: https://hive.ethpandaops.io/#/test/template-devnet-0/
  INSTALL_RCLONE_VERSION: v1.68.2
  EEST_BUILD_ARG_FIXTURES: https://github.com/ethereum/execution-spec-tests/releases/download/template-devnet-0%40v1.0.0/fixtures_template-devnet-0.tar.gz
  EEST_BUILD_ARG_BRANCH: hive
  # Flags used for all simulators
  GLOBAL_EXTRA_FLAGS: >-
    --client.checktimelimit=180s
    --sim.parallelism=4
    --docker.auth
    --docker.buildoutput
  # Flags used for the ethereum/eest/consume-engine simulator
  EEST_ENGINE_FLAGS: >-
    --sim.buildarg fixtures=${EEST_BUILD_ARG_FIXTURES}
    --sim.buildarg branch=${EEST_BUILD_ARG_BRANCH}
    --sim.loglevel=3
  # Flags used for the ethereum/eest/consume-rlp simulator
  EEST_RLP_FLAGS: >-
    --sim.buildarg fixtures=${EEST_BUILD_ARG_FIXTURES}
    --sim.buildarg branch=${EEST_BUILD_ARG_BRANCH}
    --sim.loglevel=3
  # Flags used for the ethereum/eest/execute simulator
  EEST_EXECUTE_FLAGS: >-
    --sim.buildarg branch=${EEST_BUILD_ARG_BRANCH}
  # Flags used for the ethereum/rpc-compat simulator
  RPC_COMPAT_FLAGS: >-
    --sim.loglevel=3

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      # Hive version
      hive_repo: >-
        ${{
          steps.client_config_schedule.outputs.hive_repo ||
          steps.client_config_dispatch.outputs.hive_repo
        }}
      hive_tag: >-
        ${{
          steps.client_config_schedule.outputs.hive_tag ||
          steps.client_config_dispatch.outputs.hive_tag
        }}
      # client_config contains the YAML client config for Hive
      client_config: >-
        ${{
          steps.client_config_schedule.outputs.client_config ||
          steps.client_config_dispatch.outputs.client_config
        }}
    steps:
      - uses: ethpandaops/hive-github-action/helpers/client-config@a9ec89442df18ee579d3179b76c47f5f93954307 # v0.4.0
        if: github.event_name == 'schedule'
        name: 'Client config: schedule'
        id: client_config_schedule
        with:
          common_client_tag: 'template-devnet-0'
          client_source: 'docker'
          hive_version: 'ethereum/hive@master'
          goproxy: ${{ env.GOPROXY }}

      - uses: ethpandaops/hive-github-action/helpers/client-config@a9ec89442df18ee579d3179b76c47f5f93954307 # v0.4.0
        if: github.event_name == 'workflow_dispatch'
        name: 'Client config: workflow_dispatch'
        id: client_config_dispatch
        with:
          client_repos: ${{ inputs.client_repos }}
          client_images: ${{ inputs.client_images }}
          common_client_tag: ${{ inputs.common_client_tag }}
          client_source: ${{ inputs.client_source }}
          hive_version: ${{ inputs.hive_version }}
          goproxy: ${{ env.GOPROXY }}
  test:
    timeout-minutes: 540 # 9 hours
    needs: prepare
    runs-on: >-
      ${{
        matrix.simulator == 'ethereum/rpc-compat' && 'ubuntu-latest' ||
        contains(matrix.simulator, 'ethereum/eest/') && 'self-hosted-ghr-size-m-x64' ||
        'ubuntu-latest'
      }}
    concurrency:
      group: >-
        ${{ github.head_ref || inputs }}-${{ matrix.client }}-${{ matrix.simulator }}
    strategy:
      fail-fast: false
      matrix:
        client: >-
          ${{
            fromJSON(format('[{0}]', inputs.client || '
              "besu",
              "erigon",
              "go-ethereum",
              "nethermind",
              "nimbus-el",
              "reth"
          '))}}
        simulator: >-
          ${{
            fromJSON(format('[{0}]', inputs.simulator || '
            "ethereum/eest/consume-engine",
            "ethereum/eest/consume-rlp"
          '))}}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: ethpandaops/hive-github-action/helpers/self-hosted-runner-dependencies@a9ec89442df18ee579d3179b76c47f5f93954307 # v0.4.0
        if: runner.environment != 'github-hosted'
      - uses: ethpandaops/actions/docker-login@a91b7a8dd6a264f5e845ac2aa52d2d6f24e6d01d
        with:
          username: ethpandaops
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - uses: ethpandaops/hive-github-action@a9ec89442df18ee579d3179b76c47f5f93954307 # v0.4.0
        with:
          hive_repository: ${{ needs.prepare.outputs.hive_repo }}
          hive_version: ${{ needs.prepare.outputs.hive_tag }}
          client: ${{ matrix.client }}
          simulator: ${{ matrix.simulator }}
          client_config: ${{ needs.prepare.outputs.client_config }}
          extra_flags: >-
            ${{ env.GLOBAL_EXTRA_FLAGS }}
            ${{ matrix.simulator == 'ethereum/rpc-compat' && env.RPC_COMPAT_FLAGS || '' }}
            ${{ matrix.simulator == 'ethereum/eest/consume-engine' && env.EEST_ENGINE_FLAGS || '' }}
            ${{ matrix.simulator == 'ethereum/eest/consume-rlp' && env.EEST_RLP_FLAGS || '' }}
          s3_upload: true
          s3_bucket: ${{ env.S3_BUCKET }}
          s3_path: ${{ env.S3_PATH }}
          s3_public_url: ${{ env.S3_PUBLIC_URL }}
          rclone_config: ${{ secrets.HIVE_RCLONE_CONFIG }}
          rclone_version: ${{ env.INSTALL_RCLONE_VERSION }}
          workflow_artifact_upload: true
          website_upload: true
